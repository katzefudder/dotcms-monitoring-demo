worker_processes  1;

events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    client_body_temp_path /var/run/openresty/nginx-client-body;
    proxy_temp_path       /var/run/openresty/nginx-proxy;
    fastcgi_temp_path     /var/run/openresty/nginx-fastcgi;
    uwsgi_temp_path       /var/run/openresty/nginx-uwsgi;
    scgi_temp_path        /var/run/openresty/nginx-scgi;

#    log_format main   '$remote_addr - $remote_user $upstream_cache_status [$time_local] client=$remote_addr '
#                         'method=$request_method request="$request" '
#                         'request_length=$request_length '
#                         'response_code=$status bytes_sent=$bytes_sent '
#                         'body_bytes_sent=$body_bytes_sent '
#                         'referer=$http_referer '
#                         'user_agent="$http_user_agent" '
#                         'ups_addr=$upstream_addr '
#                         'ups_status=$upstream_status '
#                         'request_time=$request_time '
#                         'ups_response_time=$upstream_response_time '
#                         'ups_connect_time=$upstream_connect_time '
#                         'ups_header_time=$upstream_header_time '
#                         'forwarded_for=$http_x_forwarded_for';

    sendfile        on;

    keepalive_timeout  65;

    lua_package_path '/etc/nginx/lua/?.lua;;';
    lua_shared_dict prometheus_metrics 100M;

    init_by_lua '
        prometheus = require("prometheus").init("prometheus_metrics")

        metric_requests = prometheus:counter(
            "nginx_http_requests_total",
            "Number of HTTP requests",
            {"host", "status"}
        )
        metric_latency = prometheus:histogram(
            "nginx_http_request_duration_seconds",
            "HTTP request latency",
            {"host", "status"}
        )
        metric_connections = prometheus:gauge(
            "nginx_http_connections",
            "Number of HTTP connections",
            {"state"}
        )
        metric_backend_requests = prometheus:counter(
            "nginx_requests",
            "Number of requests with status code",
            {"host", "status", "request"}
        )
    ';
    log_by_lua '
        local host = ngx.var.host:gsub("^www.", "")
    
        if string.match(ngx.var.request_uri, "/([a-z]+)/") then
            local request = string.match(ngx.var.request_uri, "/([a-z]+)/")
            metric_backend_requests:inc(1, {host, ngx.var.status, request})
        end

        metric_requests:inc(1, {host, ngx.var.status})
        metric_latency:observe(ngx.now() - ngx.req.start_time(), {host, ngx.var.status})
    ';

    include /etc/nginx/conf.d/*.conf;
}